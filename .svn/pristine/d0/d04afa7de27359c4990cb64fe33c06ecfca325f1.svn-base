import React, { Component } from "react";
import { Row, Col, Form, Input, Select, Button, Alert } from "antd";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import moment from "moment";
import getAllUserApi from "getAllUserApi";
import getUserCookies from "getUserCookies";
import getDestinationUserAPI from "getDestinationUserAPI";
import Constants from "Constants";
import {
  GETSTAFF,
  GETINSPECTOR,
  CREATECALENDERINSPECTOR,
} from "./../../../config/config";
import callApi from "./../../../util/apiCaller";
import TableBinhGas from "./tableBinhGas";
import TableBonGas from "./tableBonGas";

const { Option } = Select;
export default class CreateCalenderInspector extends Component {
  constructor(props) {
    super(props);
    this.state = {
      startDate: new Date(),
      listUsersGeneral: [],
      listUsersAgency: [],
      listCompany: [],
      listUserFixer: [],
      valueCompany: "",
      listStaff: [],
      listInspector: [],
      address: "",
      tittle: "",
      staff: [],
      inspector: [],
      styleFix: "",
      tokenAPI: "",
    };
  }
  async componentDidMount() {
    await this.getAllUserGeneral();
    await this.getAllUserAGENCY();
    await this.getListFixer();
    let user_cookies = await getUserCookies();
    //console.log(user_cookies.user.id);
    let token = "Bearer " + user_cookies.token;
    let id = user_cookies.user.id;
    await this.getAllStaff(id, token);
    await this.getAllInspector(id, token);
    this.setState({
      listCompany: [
        ...this.state.listUsersGeneral,
        ...this.state.listUsersAgency,
        ...this.state.listUserFixer,
      ],
      tokenAPI: token,
    });
  }
  async getAllUserGeneral() {
    const dataUsers = await getAllUserApi(Constants.GENERAL);
    if (dataUsers) {
      if (dataUsers.status === Constants.HTTP_SUCCESS_BODY) {
        this.setState({ listUsersGeneral: dataUsers.data });
      } else {
        showToast(
          dataUsers.data.message
            ? dataUsers.data.message
            : dataUsers.data.err_msg,
          2000
        );
      }

      //this.setState({image_link: profile.data.company_logo});
    } else {
      showToast("Xảy ra lỗi trong quá trình lấy dữ liệu");
    }
  }
  async getAllUserAGENCY() {
    const dataUsers = await getAllUserApi(Constants.AGENCY);
    if (dataUsers) {
      if (dataUsers.status === Constants.HTTP_SUCCESS_BODY) {
        this.setState({ listUsersAgency: dataUsers.data });
      } else {
        showToast(
          dataUsers.data.message
            ? dataUsers.data.message
            : dataUsers.data.err_msg,
          2000
        );
      }

      //this.setState({image_link: profile.data.company_logo});
    } else {
      showToast("Xảy ra lỗi trong quá trình lấy dữ liệu");
    }
  }
  async getListFixer() {
    const dataUsers = await getDestinationUserAPI(
      Constants.FACTORY,
      "",
      Constants.OWNER
    );
    if (dataUsers) {
      if (dataUsers.status === Constants.HTTP_SUCCESS_BODY) {
        this.setState({ listUserFixer: dataUsers.data });
      } else {
        showToast(
          dataUsers.data.message
            ? dataUsers.data.message
            : dataUsers.data.err_msg,
          2000
        );
      }

      //this.setState({image_link: profile.data.company_logo});
    } else {
      showToast("Xảy ra lỗi trong quá trình lấy dữ liệu");
    }
  }
  async getAllStaff(id, token) {
    //const jobMetaData = await this.getJobMetaData();
    let prams = {
      id: id,
    };
    await callApi("POST", GETSTAFF, prams, token).then((res) => {
      this.setState({
        listStaff: res.data.data,
      });
    });

    //showToast("Xảy ra lỗi trong quá trình lấy dữ liệu");
  }
  async getAllInspector(id, token) {
    //const jobMetaData = await this.getJobMetaData();
    let prams = {
      id: id,
    };
    await callApi("POST", GETINSPECTOR, prams, token).then((res) => {
      this.setState(
        {
          listInspector: res.data.data,
        },
        () => console.log(this.state.listInspector)
      );
    });

    //showToast("Xảy ra lỗi trong quá trình lấy dữ liệu");
  }
  onChangeCompany = async (value) => {
    this.setState(
      {
        valueCompany: value,
      },
      () => {
        let index = this.state.listCompany.findIndex(
          (company) => company.id === this.state.valueCompany
        );
        this.setState({
          address: this.state.listCompany[index].address,
        });
      }
    );
  };
  handleChangeStaff = (value) => {
    let stringStaff = "";
    for (let i = 0; i < value.length; i++) {
      stringStaff += value[i];
      if (i < value.length - 1) {
        stringStaff += ",";
      } else if (i === value.length - 1) {
        stringStaff += "";
      }
    }
    this.setState({
      staff: stringStaff,
    });
  };
  handleChangeDate = (date) => {
    this.setState({
      startDate: date,
    });
  };
  onChangeTitle = (e) => {
    this.setState({
      tittle: e.target.value,
    });
  };
  handleChangeInspector = (value) => {
    let stringInspector = "";
    for (let i = 0; i < value.length; i++) {
      stringInspector += value[i];
      if (i < value.length - 1) {
        stringInspector += ",";
      } else if (i === value.length - 1) {
        stringInspector += "";
      }
    }
    this.setState({
      inspector: stringInspector,
    });
  };
  onChangeAddress = (e) => {
    this.setState({
      address: e.target.value,
    });
  };
  onChangeStyleFix = (value) => {
    this.setState({
      styleFix: value,
    });
  };
  onCreate = async (e) => {
    e.preventDefault();
    let {
      address,
      tittle,
      staff,
      inspector,
      styleFix,
      startDate,
      valueCompany,
    } = this.state;
    let dateNow = new Date();
    let dateChose = startDate;
    let d1 = Date.parse(dateNow);
    let d2 = Date.parse(dateChose);
    if (
      !address ||
      !tittle ||
      !staff ||
      !inspector ||
      !styleFix ||
      !startDate ||
      !valueCompany
    ) {
      alert("Vui lòng nhập đầy đủ thông tin");
    }
    if (
      address &&
      tittle &&
      staff &&
      inspector &&
      styleFix &&
      startDate &&
      valueCompany
    ) {
      if (moment(d2).format("DD/MM/YYYY") < moment(d1).format("DD/MM/YYYY")) {
        alert("Ngày bạn chọn phải lớn hơn hoặc bằng ngày hiện tạis");
      } else if (moment(d2).format("DD/MM/YYYY") >= moment(d1).format("DD/MM/YYYY")) {
        let date = moment(startDate).format("DD/MM/YYYY");
        let params = {
          tittle: tittle,
          idCheckingAt: valueCompany,
          idStaff: staff,
          idInspector: inspector,
          location: address,
          maintenanceType: styleFix,
          maintenanceDate: date,
        };
        await callApi(
          "POST",
          CREATECALENDERINSPECTOR,
          params,
          this.state.tokenAPI
        ).then((res) => {
          console.log(res);
          alert("Tạo thành công");
        });
      }
    }
  };
  render() {
    let {
      address,
      tittle,
      staff,
      inspector,
      styleFix,
      startDate,
      valueCompany,
    } = this.state;
    //console.log(this.state.valueCompany);
    return (
      <div>
        <Row>
          <Col xs={1}></Col>
          <Col xs={22}>
            <Form>
            <Row style={{marginTop:20}}>
            <Col style={{textAlign:'center',alignItems:'center'}}>
              <h6>Tạo lịch kiểm tra</h6>
            </Col>
            </Row>
              <Row>
                <Col xs={24} md={11}>
                  <Form.Item label="Tiêu đề" style={{ display: "block" }}>
                    <Input onChange={this.onChangeTitle} value={tittle} />
                  </Form.Item>
                </Col>
                <Col xs={2}></Col>
                <Col xs={24} md={11}>
                  <Form.Item label="Chọn công ty">
                    <Select
                      showSearch
                      optionFilterProp="children"
                      onChange={this.onChangeCompany}
                      filterOption={(input, option) =>
                        option.props.children
                          .toLowerCase()
                          .indexOf(input.toLowerCase()) >= 0
                      }
                    >
                      {this.state.listCompany.map((company, index) => {
                        return (
                          <Option key={index} value={company.id}>
                            {company.name}
                          </Option>
                        );
                      })}
                    </Select>
                  </Form.Item>
                </Col>
              </Row>
              <Row>
                <Col xs={24} md={11}>
                  <Form.Item label="Chọn nhân viên">
                    <Select
                      mode="tags"
                      style={{ width: "100%" }}
                      onChange={this.handleChangeStaff}
                      filterOption={(input, option) =>
                        option.props.children
                          .toLowerCase()
                          .indexOf(input.toLowerCase()) >= 0
                      }
                      //tokenSeparators={[","]}
                    >
                      {this.state.listStaff.map((staff, index) => {
                        return (
                          <Option key={index} value={staff.id}>
                            {staff.name}
                          </Option>
                        );
                      })}
                    </Select>
                  </Form.Item>
                </Col>
                <Col xs={2}></Col>
                <Col xs={24} md={11}>
                  <Form.Item label="Chọn thanh tra">
                    <Select
                      mode="tags"
                      style={{ width: "100%" }}
                      onChange={this.handleChangeInspector}
                      filterOption={(input, option) =>
                        option.props.children
                          .toLowerCase()
                          .indexOf(input.toLowerCase()) >= 0
                      }
                      //tokenSeparators={[","]}
                    >
                      {this.state.listInspector.map((inspector, index) => {
                        return (
                          <Option key={index} value={inspector.id}>
                            {inspector.name}
                          </Option>
                        );
                      })}
                    </Select>
                  </Form.Item>
                </Col>
              </Row>
              <Row>
                <Col xs={24} md={11}>
                  <Form.Item
                    label="Địa chỉ"
                    style={{ display: "block" }}
                    onChange={this.onChangeAddress}
                  >
                    <Input value={address} />
                  </Form.Item>
                </Col>
                <Col xs={2}></Col>
                <Col xs={24} md={11}>
                  <Form.Item label="Loại bảo trì">
                    <Select
                      showSearch
                      optionFilterProp="children"
                      onChange={this.onChangeStyleFix}
                      filterOption={(input, option) =>
                        option.props.children
                          .toLowerCase()
                          .indexOf(input.toLowerCase()) >= 0
                      }
                    >
                      <Option value="00">Bình gas</Option>
                      <Option value="01">Bồn gas</Option>
                    </Select>
                  </Form.Item>
                </Col>
              </Row>
            </Form>
          </Col>
          <Col xs={1}></Col>
        </Row>
        <Row>
          <Col xs={1}></Col>
          <Col xs={22} md={11}>
            <Form.Item label="Ngày bảo trì" style={{ display: "block" }}>
              <DatePicker
                selected={moment(this.state.startDate)}
                onChange={this.handleChangeDate}
                dateFormat="  DD/MM/YYYY"
              />
            </Form.Item>
          </Col>
          <Col xs={1}></Col>
        </Row>
        {styleFix === "00" ? <TableBinhGas /> : ""}
        {styleFix === "01" ? <TableBonGas /> : ""}
        <Row>
          <Col xs={1} md={4}></Col>
          <Col xs={22} md={16}>
            <Form.Item>
              <Button
                style={{ width: "100%" }}
                type="primary"
                htmlType="submit"
                className="login-form-button"
                onClick={this.onCreate}
              >
                Tạo lịch thanh tra/Bảo trì
              </Button>
            </Form.Item>
          </Col>
          <Col xs={1} md={4}></Col>
        </Row>
      </div>
    );
  }
}
import React from "react";
import Form from "react-validation/build/form";
import Input from "react-validation/build/input";
//import Select from "react-select";
import SelectMulti from "react-select";
import Button from "react-validation/build/button";
import required from "required";
import Constant from "Constants";
import showToast from "showToast";
import TagAutocomplete from "TagAutoComplete";
import callApi from './../../../util/apiCaller';
import getUserCookies from './../../../helpers/getUserCookies';
import { NAMEDRIVE } from './../../../config/config';
import createHistoryAPI from "createHistoryAPI";
import { Select } from "antd";
const Option = Select.Option;

//var user_cookie = await getUserCookies();
//let token="Bearer " + user_cookie.token,
//"email": user_cookie.user.email,
class ExportDriverFactoryPopup extends React.Component {
  constructor(props) {
    super(props);
    this.form = null;
    this.state = {
      content: "",
      listProducts: [],
      isShowNumber: false,
      listExportPlaceData: "",
      AgencyResults: [],
      GeneralResults: [],
      listExportPlaceDataID: "",
      driverName: "",
      idDriver: "",
      listDriver: []
    };
  }

  handleChangeGeneral = (langValue) => {
    this.setState({ GeneralResults: langValue });
  };
  handleChangeAgency = (langValue) => {
    this.setState({ AgencyResults: langValue });
  };
  handleChangeDriver = (value) => {
    this.setState({
      idDriver: value
    });
  };

  async addHistory(driverName, license_plate, cylinders, to_array, number_array, idDriver, sign) {
    // Call api
    this.setState({ isLoading: true });
    const user = await createHistoryAPI(
      driverName,
      license_plate,
      cylinders,
      Constant.EXPORT_FACTORY,
      "",
      "",
      "",
      "",
      to_array,
      number_array,
      "",
      "",
      "",
      "",
      "",
      idDriver,
      sign
    );
    this.setState({ isLoading: false });
    //console.log('register',user);
    if (user) {
      if (
        user.status === Constant.HTTP_SUCCESS_CREATED ||
        user.status === Constant.HTTP_SUCCESS_BODY
      ) {
        showToast("Xuất hàng thành công!", 3000);
        const modal = $("#export-driver");
        modal.modal("hide");
        //this.props.refresh();
        return true;
      } else {
        showToast(
          user.data.message ? user.data.message : user.data.err_msg,
          2000
        );
        return false;
      }
    } else {
      showToast("Xảy ra lỗi trong quá trình tạo bình ");
      return false;
    }

    //this.setState({registerSuccessful: false});
  }

  async componentDidMount() {
    let user_cookie = await getUserCookies();
    let token = "Bearer " + user_cookie.token;
    let params = {
      "id": user_cookie.user.id
    }
    await callApi("POST", NAMEDRIVE, params, token).then(res => {
      if (res.data.data <= 0) {
        this.setState({
          listDriver: [{
            name: "Bạn chưa có tài xế",
            id: 'null'
          }]
        })
      }
      else {
        //console.log(user_cookie.user.id+""+res.data.data);
        this.setState({
          listDriver: res.data.data
        }, () => console.log(this.state.listDriver))
      }
    })
  }

  async submit(event) {
    event.preventDefault();
    let { listDriver } = this.state;
    let index = listDriver.findIndex(l => l.id === this.state.idDriver);
    let nameDriver = listDriver[index].name;
    //// var products=await this.getAllCylenders();
    var cylinders = [];
    for (let i = 0; i < this.props.product_parse.length; i++) {
      cylinders.push(this.props.product_parse[i].id);
    }

    let data = this.form.getValues();
    console.log(data["numberGeneral1"]);
    let toArray = [];
    let numberArray = [];
    let generalList = this.state.GeneralResults;
    let agencyList = this.state.AgencyResults;
    if (agencyList.length === 0 && generalList.length === 0) {
      showToast("Hãy chọn nơi cần xuất bình");
      return;
    }
    else {
      for (let i = 0; i < generalList.length; i++) {
        toArray.push(generalList[i].value);
        if (data["numberGeneral" + i]) numberArray.push(data["numberGeneral" + i]);
        else numberArray.push(0);
      }
      for (let i = 0; i < agencyList.length; i++) {
        toArray.push(agencyList[i].value);
        if (data["numberAgency" + i]) numberArray.push(data["numberAgency" + i]);
        else numberArray.push(0)
      }
    }
    await this.addHistory(
      nameDriver,
      data.license_plate,
      cylinders,
      toArray,
      numberArray,
      this.state.idDriver,
      "Xuat hang tren Web"
    );
    return;
  }

  async submitTextFile(event) {
    // /* if (!file) showToast('Vui lòng chọn file!', 3000);
    //      this.setState({isLoading: true});
    //      const result = await importProductsFromExcelAPI(file);
    //      this.setState({isLoading: false});
    //      console.log(result);
    //      if (result && result.status === 200) {
    //          if (typeof (result) !== 'undefined') {
    //              showToast('Đưa vào thành công!', 3000);
    //              this.props.refresh();
    //          }
    //          else {
    //              //showToast("Xảy ra lỗi trong quá trình đăng ký",2000);
    //          }
    //          return;
    //      } else {
    //          showToast("Xảy ra lỗi trong quá trình import. Vui lòng kiểm tra lại dữ liệu", 2000);
    //      }
    //      return;
    //      $("#import-product").modal('hide');
    //      return;*/
  }

  handleChangeExportType = (langValue) => {
    this.setState({
      listExportPlaceData: langValue,
      listExportPlaceDataID: langValue.id,
    });
  };

  render() {
    //console.log("hahahhahaha", this.props.listExportPlace);
    return (
      <div className="modal fade" id="export-driver" tabIndex="-1" style={{ overflowY: 'auto' }}>
        <div className="modal-dialog modal-lg">
          <div className="modal-content">
            <div className="modal-header">
              <h5 className="modal-title">
                Xuất Bình - Bước 2 - Thông Tin Tài Xế
              </h5>
              <button type="button" className="close" data-dismiss="modal">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div className="modal-body">
              <Form
                ref={(c) => {
                  this.form = c;
                }}
                className="card"
                onSubmit={(event) => this.submit(event)}
              >
                <div className="card-body">
                  <div className="row">
                    <div className="col-md-6">
                      <div className="form-group">
                        <label>Tên tài xế</label>
                        <Select
                          showSearch
                          style={{ width: "100%" }}
                          placeholder="Chọn tài xế..."
                          optionFilterProp="children"
                          onChange={this.handleChangeDriver}
                          filterOption={(input, option) =>
                            option.props.children
                              .toLowerCase()
                              .indexOf(input.toLowerCase()) >= 0
                          }
                        >
                          {this.state.listDriver.map((l, index) => {
                            return <Option key={index} value={l.id}>{l.name}</Option>
                          })}
                        </Select>
                      </div>
                    </div>
                    <div className="col-md-6">
                      <div className="form-group">
                        <label>Bản số xe </label>
                        <Input
                          className="form-control"
                          type="text"
                          name="license_plate"
                          id="license_plate"
                          validations={[required]}
                        />
                      </div>
                    </div>

                    {/*<div className="col-md-12">*/}
                    {/*    <div className="form-group">*/}
                    {/*        <label>Loại xuất </label>*/}
                    {/*        <Select onClick={() => {*/}
                    {/*            this.setState({isShowDropdown: this.form.getValues().type_export})*/}
                    {/*        }} className="form-control"*/}
                    {/*                name="type_export"*/}
                    {/*                validations={[required]}>*/}
                    {/*            <option value="0">-- Chọn --</option>*/}
                    {/*            <option value="2">Xuất cho thương nhân mua bán</option>*/}
                    {/*            <option value="3">Xuất cho cửa hàng bán lẻ</option>*/}
                    {/*        </Select>*/}
                    {/*    </div>*/}
                    {/*</div>*/}

                    {/*{this.props.userType === Constant.FACTORY && (*/}
                    {/*    <div className="col-md-12">*/}
                    {/*        <div className="form-group">*/}
                    {/*            <label>"Địa điểm xuất bình"</label>*/}
                    {/*            <Select*/}
                    {/*                options={this.props.listExportPlace}*/}
                    {/*                onChange={this.handleChangeExportType.bind(this)}*/}
                    {/*                placeholder="Chọn..."*/}
                    {/*                value={this.state.listExportPlaceData}*/}
                    {/*            />*/}
                    {/*        </div>*/}
                    {/*    </div>*/}
                    {/*)}*/}
                    {this.props.userType === Constant.GENERAL ? '' : (<div className="col-md-6">
                      <div className="form-group">
                        <label>Thương nhân mua bán</label>
                        <SelectMulti.Creatable
                          multi={true}
                          options={this.props.listFactoryExports.filter(
                            (x) => x.userType === Constant.GENERAL
                          )}
                          onChange={this.handleChangeGeneral.bind(this)}
                          placeholder="Chọn..."
                          value={this.state.GeneralResults}
                          promptTextCreator={() => {
                            return;
                          }}
                        />
                      </div>
                    </div>)}


                    <div className="col-md-6">
                      <div className="form-group">
                        <label>Cửa hàng bán lẻ</label>

                        <SelectMulti.Creatable
                          multi={true}
                          options={this.props.listFactoryExports.filter(
                            (x) => x.userType === Constant.AGENCY
                          )}
                          onChange={this.handleChangeAgency.bind(this)}
                          placeholder="Chọn..."
                          value={this.state.AgencyResults}
                          promptTextCreator={() => {
                            return;
                          }}
                        />
                      </div>
                    </div>
                    {this.props.userType === Constant.GENERAL ? "" : (
                      <div className="col-md-6">
                        <table
                          className="table table-striped table-bordered seednet-table-keep-column-width"
                          cellSpacing="0"
                        >
                          <tbody className="display-block display-tbody">
                            {this.state.GeneralResults.map((store, index) => {
                              return (
                                <tr key={index}>
                                  <td scope="row" className="text-center">
                                    {store.name}
                                  </td>
                                  <td scope="row" className="text-center">
                                    <Input
                                      name={"numberGeneral" + index}
                                      placeholder={"Nhập số lượng"}
                                      validations={[required]}
                                      className="form-control"
                                      type="number"
                                    />
                                  </td>
                                </tr>
                              );
                            })}
                          </tbody>
                        </table>
                      </div>
                    )}
                    <div className="col-md-6">
                      <table
                        className="table table-striped table-bordered seednet-table-keep-column-width"
                        cellSpacing="0"
                      >
                        <tbody className="display-block display-tbody">
                          {this.state.AgencyResults.map((store, index) => {
                            return (
                              <tr key={index}>
                                <td scope="row" className="text-center">
                                  {store.name}
                                </td>
                                <td scope="row" className="text-center">
                                  <Input
                                    name={"numberAgency" + index}
                                    placeholder={"Nhập số lượng"}
                                    className="form-control"
                                    type="number"
                                  />
                                </td>
                              </tr>
                            );
                          })}
                        </tbody>
                      </table>
                    </div>


                    {/* {this.state.isShowDropdown==='1' && (<div className="col-md-6">
                                            <div className="form-group">
                                                <label>Trạm chiết nạp</label>
                                                <Select className="form-control"
                                                        name="station"
                                                        validations={[required]}>
                                                    <option value="">-- Chọn --</option>
                                                    {this.props.listStationUser.map((item, index) => <option value={item.id}>{item.name}</option>)}
                                                </Select>
                                            </div>
                                        </div>)} */}
                  </div>
                </div>

                <footer className="card-footer text-center">
                  <Button className="btn btn-primary" type="submit">
                    Lưu
                  </Button>
                  <button
                    className="btn btn-secondary"
                    type="reset"
                    data-dismiss="modal"
                    style={{ marginLeft: "10px" }}
                  >
                    Đóng
                  </button>
                </footer>
              </Form>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

export default ExportDriverFactoryPopup;

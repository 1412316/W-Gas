import React from 'react';
import PropType from 'prop-types';
import Form from 'react-validation/build/form';
import Input from 'react-validation/build/input';
import Select from 'react-validation/build/select';
import Button from 'react-validation/build/button';
import required from 'required';
import Constant from "Constants";
import showToast from "showToast";

import createHistoryAPI from "createHistoryAPI";
//import getAllDriversAPI from "getAllDriversAPI";

class TurnBackDriverFactoryPopup extends React.Component {

    constructor(props) {
        super(props);
        this.form = null;
        this.state = {
            content: '',
            listProducts: [],
            typeImport: "",
        };
    }

    async addHistory(driver, license_plate, cylinders, type, stationId, numberOfCylinder, idDriver, signature) {

        // Call api
        this.setState({ isLoading: true });
        console.log(stationId);
        const user = await createHistoryAPI(driver, license_plate, cylinders, Constant.IMPORT_FACTORY, '', type, numberOfCylinder, '', '', '', '', '', '', '', '', idDriver, signature);
        this.setState({ isLoading: false });
        //console.log('register',user);
        if (user) {
            if (user.status === Constant.HTTP_SUCCESS_CREATED || user.status === Constant.HTTP_SUCCESS_BODY && !user.data.hasOwnProperty("err_msg")) {
                showToast('Nhập hàng thành công!', 3000);
                const modal = $("#turn-back-driver");
                modal.modal('hide');
                //this.props.refresh();
                return true;
            }
            else {
                showToast(user.data.message ? user.data.message : user.data.err_msg, 2000);
                const modal = $("#turn-back-driver");
                modal.modal('hide');
                //this.props.refresh();
                return false;
            }
        }
        else {
            showToast("Xảy ra lỗi trong quá trình tạo bình ");
            return false;
        }

        //this.setState({registerSuccessful: false});
    }

    async getDriver() {
        const dataUsers = await getAllDriversAPI();
        if (dataUsers) {
            if (dataUsers.status === Constants.HTTP_SUCCESS_BODY) {
              this.setState({ listManufacturers: dataUsers.data });
            } else {
              showToast(
                dataUsers.data.message
                  ? dataUsers.data.message
                  : dataUsers.data.err_msg,
                2000
              );
            }
        } else {
            showToast("Xảy ra lỗi trong quá trình lấy dữ liệu");
        }
    }

    /*handleObjectDataChild = async (childValue) => {
        handleObjectDataChildCTC
    };*/

    async submit(event) {

        event.preventDefault();
        // var products=await this.getAllCylenders();
        var cylinders = [];
        for (let i = 0; i < this.props.product_parse.length; i++) {
            cylinders.push(this.props.product_parse[i].id);
        }

        let data = this.form.getValues();
        data.idDriver = data.driver;
        await this.addHistory(data.driver, data.license_plate, cylinders, Constant.TURN_BACK_TYPE, data.station, data.number_cylinder, data.idDriver, data.signature);
        // if (this.state.position.length === 0) {
        //     showToast('Chưa chọn vị trí!', 3000);
        //     return;
        // }
        /*  let data= this.form.getValues();
          let result= await this.props.addUser(data.email,data.name,data.address,"",USERROLE_ENUM[parseInt(data.userRole)].key);
          if(result)
          {
              const modal = $("#create-staff");
              modal.modal('hide');

          }
  */
        return;
    }

    async submitTextFile(event) {
        /* if (!file) showToast('Vui lòng chọn file!', 3000);
         this.setState({isLoading: true});
         const result = await importProductsFromExcelAPI(file);
         this.setState({isLoading: false});
         console.log(result);
         if (result && result.status === 200) {
             if (typeof (result) !== 'undefined') {
                 showToast('Đưa vào thành công!', 3000);
                 this.props.refresh();
             }
             else {
                 //showToast("Xảy ra lỗi trong quá trình đăng ký",2000);
             }
             return;
         } else {
             showToast("Xảy ra lỗi trong quá trình import. Vui lòng kiểm tra lại dữ liệu", 2000);
         }
         return;
         $("#import-product").modal('hide');
         return;*/
    }

    /*async handleChangeTypeImport(event) {

        this.setState({ typeImport: event.target.value })
    }*/


    render() {
        return (
            <div className="modal fade" id="turn-back-driver" tabIndex="-1">
                <div className="modal-dialog modal-lg">
                    <div className="modal-content">
                        <div className="modal-header">
                            <h5 className="modal-title">Nhập Hồi Lưu - Bước 2 - Thông Tin Tài Xế</h5>
                            <button type="button" className="close" data-dismiss="modal">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div className="modal-body">
                            <Form ref={c => {
                                this.form = c
                            }} className="card" onSubmit={(event) => this.submit(event)}>
                                <div className="card-body">
                                    <div className="row">
                                        <div className="col-md-6">
                                            <div className="form-group">
                                                <label>Tên tài xế</label>
                                                <Select name='city' value='' validations={[required]}>
                                                    <option value=''>Lựa chọn</option>
                                                    <option value='1'>London</option>
                                                    <option value='2'>Kyiv</option>
                                                    <option value='3'>New York</option>
                                                </Select>
                                                <Select className="form-control" type="text" name="driver" validations={[required]} />
                                            </div>
                                        </div>
                                        <div className="col-md-6">
                                            <div className="form-group">
                                                <label>Bản số xe </label>
                                                <Input className="form-control" type="text" name="license_plate" id="license_plate" validations={[required]} />
                                            </div>
                                        </div>
                                        {/*<div className="col-md-6">*/}
                                        {/*    <div className="form-group">*/}
                                        {/*        <label>Loại nhập</label>*/}
                                        {/*        <Select className="form-control"*/}
                                        {/*                name="import_type"*/}
                                        {/*                onChange={(event) => this.handleChangeTypeImport(event)}*/}
                                        {/*                validations={[required]}>*/}
                                        {/*            <option value="">-- Chọn --</option>*/}
                                        {/*            <option value={Constant.TURN_BACK_TYPE}>Nhập hồi lưu </option>*/}
                                        {/*            <option value={Constant.IMPORT_TYPE}>Nhập từ trạm chiết </option>*/}
                                        {/*        </Select>*/}
                                        {/*    </div>*/}


                                        {/*</div>*/}
                                        <div className="col-md-6">
                                            <div className="form-group">
                                                <label>Số Lượng</label>
                                                <Input className="form-control" type="text" name="number_cylinder"
                                                    id="number_cylinder" />
                                            </div>
                                        </div>
                                        {/*{this.state.typeImport === Constant.IMPORT_TYPE ?<div className="col-md-6">*/}
                                        {/*    <label>Trạm chiết</label>*/}
                                        {/*    <Select className="form-control"*/}
                                        {/*            name="station"*/}
                                        {/*            validations={[required]}>*/}
                                        {/*        <option value="">-- Chọn --</option>*/}
                                        {/*        {this.props.listTurnBackStations.map((item) => <option value={item.id}>{item.name}</option>)}*/}

                                        {/*    </Select>*/}
                                        {/*</div> :null}*/}
                                        <div className="col-md-6">
                                            <div className="form-group">
                                                <label>Chữ ký số</label>
                                                <Input className="form-control" type="text" name="signature"
                                                    id="signature" value="Web signature" disabled/>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <footer className="card-footer text-center">
                                    <Button className="btn btn-primary" type="submit">Lưu</Button>
                                    <button className="btn btn-secondary" type="reset" data-dismiss="modal"
                                        style={{ marginLeft: "10px" }}>Đóng
                                    </button>
                                </footer>
                            </Form>

                        </div>
                    </div>
                </div>
            </div>
        );
    }
}

export default TurnBackDriverFactoryPopup;
